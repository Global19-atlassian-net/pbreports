#!/usr/bin/env python
import sys
import argparse
import logging

from pbreports.pbsystem_common.cmdline.core import main_runner_default

import pbreports
import pbreports.report.adapter
import pbreports.report.loading
import pbreports.report.coverage
import pbreports.report.control
import pbreports.report.top_variants
import pbreports.report.polished_assembly
import pbreports.report.variants
import pbreports.report.modifications
import pbreports.report.sat


log = logging.getLogger()

__version__ = pbreports.get_version()


def get_subparsers():
    sps = [
        ('loading', pbreports.report.loading.add_options_to_parser),
        ('adapter', pbreports.report.adapter.add_options_to_parser),
        ('coverage', pbreports.report.coverage.add_options_to_parser),
        ('control', pbreports.report.control.add_options_to_parser),
        ('topvariants', pbreports.report.top_variants.add_options_to_parser),
        ('minor-topvariants', pbreports.report.top_variants.add_options_to_parser_minor),
        ('polished-assembly', pbreports.report.polished_assembly.add_options_to_parser),
        ('variants', pbreports.report.variants.add_options_to_parser),
        ('modifications', pbreports.report.modifications.add_options_to_parser),
        ('sat', pbreports.report.sat.add_options_to_parser)]

    return sps


def add_subparsers(p, s):
    subparsers = p.add_subparsers(title='Report sub-commands',
                                  dest='subparser_name',
                                  help="Type {command} -h for a commands's options")
    for command_name, func in s:
        subparser = subparsers.add_parser(command_name)
        # add parser options
        subparser = func(subparser)
        # the trick of this is using the parser.set_defaults(func=_my_func)
        # then calling rcode args.func(args) (which is abstracted aways as the
        # the args_executor

    return p


def get_parser():
    description='Run pbreports.py by specifying a command.'
    p = argparse.ArgumentParser(version=__version__, description=description,
                                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparser_list = get_subparsers()
    p = add_subparsers(p, subparser_list)
    return p



def main(argv=sys.argv):
    """Main point of Entry"""
    log.info("Starting {f} version {v} report generation".format(f=__file__, v=__version__))
    return main_runner_default(argv[1:], get_parser(), log)


if __name__ == '__main__':
    sys.exit(main())
